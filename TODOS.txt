TODOS
- make tests green (/)
- warum in JoinSpec.ts =>  username: '' // Warum?? -- entfernt. ist schon im JoinState enthalten (/)
- Test für Ganzen Spiel machen. Outside in TDD. Serverseitig (/)

- playerNumber - unnötig. gamecode-username muss eindeutig sein. (/)
- check username is no already used (/)
- write assert for Test-Case '2 Players Join' in index.spec.ts (/)

- Calculation als Objekt übergeben. Dann muss man nicht so behindert stubben.
- Calculation erbt von Task. Task muss ein Interface definieren. 
 -- createTask - constr
 -- asState (/)
 -- fromState - constr
 -- isCorrect (/)

 - fix tests (/)
 -- only one test is executing..why? (weird mocha issue with glob patterns ... does not work quite well)
 ----> lol - the solution was. use single quotes

 - write "Answer" - Task has to check "Answer" (/)
 - corect Answer -> new Calculation -> Praise (/)
 - wrong Answer -> no new Calucation -> store try (x)
 - write test AnswerLogic.spec.ts (/)
 - write test flow.spec (/)
 - test fixtures - fachliche (/)

 -- FIX TEST!! (/)

 -- better abstraction for task, answer, calculation, calculationState (-- delete unnecessary) (/)
 --- TaskFactory: injected via currying (/)
 --- rewrite tests to use factory instead of weird stub (/)

 -- refactor express server to work with redux
 --- step 1 (/)
 --- > fixed effect (/)


 - connect client
 -- init Redux (/)
 -- access classes from server - reuse as much as possible - (/)
 ---- everything expect middleware (/)

 - Late Subscription in game.component.ts - how does redux alone solve this problem?
 - WebsocketService: takes action and dispatches it on the client :)


 VIEW Refactorings:
 - Login - Rename to Avatar
 -- AvatarsList
 ---- selection event (/)
 ---- flex flex-wrap, margin, center -- does not belong into the component +++ accepted for now (/)
 ---- random avatar selection (/)
 ---- focus in username
 ---- same color for input and selection
 ------ opacity vom hintergrund ändern aber nicht vom svg


 - Avatar - Rename to Join Screen (/)
 -- move color to join-screen (/)

 -- create a start game action ? not needed for now
 --- creating a random joincode in solo mode too


+ Mobile Responsiveness - not really 

-------
+ Punkte zählen "funktioniert" im Single Player Modus (/)
+ Neue Rechenaufgabe nach richtigem Ergebnis darstellen funktioniert (/)
+ Löschen wenn sich die Aufgabe ändert (/)
+ Erfolgsmeldung wenn Aufgabe korrekt gelöst wurde (/)
-------
+ Angular Upgrade auf 12 (/)
+ Redux Persist in local storage (/)
---------------------------------------
+ How to multiplayer?

-- with automerge we can sync state

-- how does automerge work with redux?

-- who is in charge for generating a new calculation?


2 Varianten:

1:
- Reducer Logik läuft am Client 
- bei jedem Change wird der State in Richtung Server gesynced (automerge magic am Server)
- Server informiert jeweils nur jene Clients die sich im selben Game befinden

2:
- Action wird am Client getriggered 
- Wird an Server übertragen.
- Am Server läuft die Reducer Logik
- neuer State wird an Clients übertragen, welche diesen via automerge updaten

3: --> we go with that one for now!!!
- ohne automerge 
--- nix zu tun
- Websocket Verbindung
--- Service baut beim Start der Applikation die Verbindung auf.
--- keine Verbindung -> dann offline Modus starten
---

- Action wird an Server übermittelt
- Reducer Logic wird am Server ausgeführt
- neuer State-Slice wird an Clients übertragen 
- wenn offline => single player modus ==> reducer logic am client



TODO:
- lese automerge docu




---------------------------------------
+ UI:
  - show new calculation only after success animations
  - keyboard - Analysis - keyboard ability

------
+ Github Actions / Gitlab + Pipeline + Deployment
------
+ Mobile Support?
------
+ save Kawaii in state

