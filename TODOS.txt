TODOS
- make tests green (/)
- warum in JoinSpec.ts =>  username: '' // Warum?? -- entfernt. ist schon im JoinState enthalten (/)
- Test für Ganzen Spiel machen. Outside in TDD. Serverseitig (/)

- playerNumber - unnötig. gamecode-username muss eindeutig sein. (/)
- check username is no already used (/)
- write assert for Test-Case '2 Players Join' in index.spec.ts (/)

- Calculation als Objekt übergeben. Dann muss man nicht so behindert stubben.
- Calculation erbt von Task. Task muss ein Interface definieren. 
 -- createTask - constr
 -- asState (/)
 -- fromState - constr
 -- isCorrect (/)

 - fix tests (/)
 -- only one test is executing..why? (weird mocha issue with glob patterns ... does not work quite well)
 ----> lol - the solution was. use single quotes

 - write "Answer" - Task has to check "Answer" (/)
 - corect Answer -> new Calculation -> Praise (/)
 - wrong Answer -> no new Calucation -> store try (x)
 - write test AnswerLogic.spec.ts (/)
 - write test flow.spec (/)
 - test fixtures - fachliche (/)

 -- FIX TEST!! (/)

 -- better abstraction for task, answer, calculation, calculationState (-- delete unnecessary) (/)
 --- TaskFactory: injected via currying (/)
 --- rewrite tests to use factory instead of weird stub (/)

 -- refactor express server to work with redux
 --- step 1 (/)
 --- > fixed effect (/)


 - connect client
 -- init Redux
 -- access classes from server - reuse as much as possible -
 ---- everything expect middleware
 -- WebsocketService: takes action and dispatches it on the client :)
